# -*- coding: utf-8 -*-
"""
Mobile proxy management
"""
import time
import threading
import requests
from utils.logger import log, FULL_LOGS, maybe_truncate

class MobileProxyManager:
    def __init__(self, proxy_id: str, api_key: str):
        self.proxy_id = proxy_id
        self.api_key = api_key
        self.base_url = "https://mobileproxy.space/api.html"
        self.changeip_url = "https://changeip.mobileproxy.space/"
        self.lock = threading.Lock()
        self.current_ip = None
        self.proxy_key = None  # –î–ª—è —Å–º–µ–Ω—ã IP –Ω—É–∂–µ–Ω proxy_key
        self.connection_info_cache = None
        self.cache_timestamp = 0
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç –∫—ç—à
        self._last_connection_request = 0  # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self._rotation_in_progress = False  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
        self._last_api_request = 0  # Rate limiting API-–∑–∞–ø—Ä–æ—Å–æ–≤

        # –í–ê–ñ–ù–û: —É–±—Ä–∞–ª–∏ —Ä–∞–Ω–Ω–∏–π –≤—ã–∑–æ–≤ self._initialize_proxy_key()
        # –ö–ª—é—á –±—É–¥–µ—Ç –ø–æ–¥—Ç—è–Ω—É—Ç –ª–µ–Ω–∏–≤–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Ä–µ–∞–ª—å–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (—Ä–æ—Ç–∞—Ü–∏–∏/–∑–∞–ø—Ä–æ—Å–µ).


    def _initialize_proxy_key(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç proxy_key –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        max_retries = 3
        retry_delay = 2
        
        for attempt in range(max_retries):
            try:
                log.debug(f"üîë Attempting to get proxy_key, attempt {attempt + 1}/{max_retries}")
                proxy_info = self._get_proxy_info()
                if self.proxy_key:
                    log.info(f"‚úÖ Successfully got proxy_key on attempt {attempt + 1}")
                    return
                else:
                    log.warning(f"‚ö†Ô∏è No proxy_key in response, attempt {attempt + 1}/{max_retries}")
                    
            except Exception as e:
                log.warning(f"‚ö†Ô∏è Failed to get proxy_key on attempt {attempt + 1}/{max_retries}: {e}")
                
            if attempt < max_retries - 1:
                log.debug(f"‚è≥ Waiting {retry_delay}s before retry...")
                time.sleep(retry_delay)
        
        log.warning("‚ö†Ô∏è Could not get proxy_key during initialization after all retries")
        log.info("üîÑ proxy_key will be obtained on first IP rotation if needed")

    def _make_api_request(self, command: str, additional_params: dict = None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API —Å rate limiting –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        # –î–û–ë–ê–í–õ–Ø–ï–ú RATE LIMITING –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        current_time = time.time()
        time_since_last = current_time - self._last_api_request
        if time_since_last < 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É API –∑–∞–ø—Ä–æ—Å–∞–º–∏
            wait_time = 3 - time_since_last
            log.debug(f"‚è≥ API rate limiting: waiting {wait_time:.1f}s")
            time.sleep(wait_time)
        
        self._last_api_request = time.time()
        
        params = {
            'command': command,
            'proxy_id': self.proxy_id
        }
        if additional_params:
            params.update(additional_params)
        
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        try:
            response = requests.get(
                self.base_url, 
                params=params, 
                headers=headers, 
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 429:
                log.warning("‚ö†Ô∏è Mobile proxy API rate limit hit, waiting...")
                time.sleep(5)
                return None
            else:
                log.error(f"‚ùå API returned status {response.status_code}: {maybe_truncate(response.text, 200)}")
                return None
                
        except requests.exceptions.ConnectionError as e:
            log.warning(f"‚ö†Ô∏è Connection error to mobile proxy API: {e}")
            return None
        except requests.exceptions.Timeout:
            log.warning("‚ö†Ô∏è Timeout connecting to mobile proxy API")
            return None
        except Exception as e:
            log.error(f"‚ùå Mobile proxy API error: {e}")
            return None


    def _get_proxy_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–∞—è proxy_key –¥–ª—è —Å–º–µ–Ω—ã IP"""
        result = self._make_api_request('get_my_proxy')
        if result and isinstance(result, list) and len(result) > 0:
            proxy_info = result[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
            # –ò–∑–≤–ª–µ–∫–∞–µ–º proxy_key –∏–∑ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã IP
            change_url = proxy_info.get('proxy_change_ip_url', '')
            if 'proxy_key=' in change_url:
                self.proxy_key = change_url.split('proxy_key=')[1].split('&')[0]
                display_key = self.proxy_key if FULL_LOGS else self.proxy_key[:10] + "..."
                log.info(f"‚úÖ Extracted proxy_key: {display_key}")
            return proxy_info
        return None
    
    def can_rotate_now(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ —Å–µ–π—á–∞—Å —Ä–æ—Ç–∏—Ä–æ–≤–∞—Ç—å IP (—Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏)"""
        if self._rotation_in_progress:
            log.debug("üîÑ Rotation already in progress")
            return False

        return True


    def check_rotation_status(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–æ—Ç–∞—Ü–∏–∏ IP"""
        log.debug(f"üîç Checking rotation status...")
        try:
            start_time = time.time()
            result = self._make_api_request('proxy_ip')
            api_duration = time.time() - start_time
            
            log.debug(f"üîç API call took {api_duration:.2f}s, result: {result}")
            
            if result and result.get('status') == 'OK':
                ip = result.get('ip')
                log.debug(f"‚úÖ Status OK, IP: {ip}")
                return {
                    'ready': True,
                    'ip': ip,
                    'status': 'completed'
                }
            elif result and result.get('status') == 'NULL IP':
                log.debug(f"‚è≥ Status NULL IP - rotation still in progress")
                return {
                    'ready': False,
                    'ip': None,
                    'status': 'in_progress'
                }
            else:
                log.warning(f"‚ö†Ô∏è Unexpected API result: {result}")
                return {
                    'ready': False,
                    'ip': None,
                    'status': 'error',
                    'error': str(result)
                }
        except Exception as e:
            log.error(f"‚ùå Error checking rotation status: {e}")
            return {
                'ready': False,
                'ip': None,
                'status': 'error',
                'error': str(e)
            }


    def wait_for_rotation_complete(self, max_wait: int = 60) -> bool:
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ—Ç–∞—Ü–∏–∏ IP —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞"""
        start_time = time.time()
        log.info(f"‚è≥ Starting rotation wait, max_wait={max_wait}s")
        
        attempt = 0
        while time.time() - start_time < max_wait:
            attempt += 1
            elapsed = time.time() - start_time
            log.info(f"üîç Rotation check attempt {attempt}, elapsed: {elapsed:.1f}s/{max_wait}s")
            
            try:
                status = self.check_rotation_status()
                log.info(f"üîç Rotation status: {status}")
                
                if status['ready']:
                    if status['ip']:
                        self.current_ip = status['ip']
                        log.info(f"‚úÖ Rotation completed: new IP {self.current_ip} after {elapsed:.1f}s")
                        return True
                    else:
                        log.warning("‚ö†Ô∏è Rotation completed but no IP received, retrying...")
                        time.sleep(3)
                        continue
                elif status['status'] == 'in_progress':
                    log.info(f"‚è≥ Rotation in progress, waiting... (attempt {attempt}, {elapsed:.1f}s)")
                    time.sleep(5)
                else:
                    log.error(f"‚ùå Rotation status error: {status.get('error', 'unknown')}")
                    log.info(f"üîÑ Will retry in 3 seconds...")
                    time.sleep(3)
                    
            except Exception as e:
                log.error(f"‚ùå Exception in rotation wait: {e}")
                time.sleep(3)
        
        final_elapsed = time.time() - start_time
        log.error(f"‚ùå Rotation timeout after {final_elapsed:.1f}s (max: {max_wait}s)")
        return False

    def rotate_ip(self) -> bool:
        """–†–æ—Ç–∏—Ä—É–µ—Ç IP –∞–¥—Ä–µ—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        log.info(f"üîÑ Starting IP rotation process...")

        if not self.can_rotate_now():
            log.info("üîÑ Rotation already in progress, waiting for completion...")
            return self.wait_for_rotation_complete(max_wait=60)

        with self.lock:
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
            self._rotation_in_progress = True
            log.info(f"üîÑ Rotation flag set, starting process...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º proxy_key –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not self.proxy_key:
                    log.info("üîç Getting proxy_key for IP rotation...")
                    for attempt in range(3):
                        try:
                            log.info(f"üîç Proxy key attempt {attempt + 1}/3")
                            proxy_info = self._get_proxy_info()
                            if self.proxy_key:
                                log.info(f"‚úÖ Got proxy_key on attempt {attempt + 1}")
                                break
                            else:
                                log.warning(f"‚ö†Ô∏è No proxy_key in response, attempt {attempt + 1}/3")
                                if attempt < 2:
                                    time.sleep(2)
                        except Exception as e:
                            log.warning(f"‚ö†Ô∏è Failed to get proxy_key, attempt {attempt + 1}/3: {e}")
                            if attempt < 2:
                                time.sleep(2)
                    
                    if not self.proxy_key:
                        log.error("‚ùå Cannot get proxy_key for IP rotation after all retries")
                        return False
                
                log.info("üîÑ Starting IP rotation request...")

                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–º–µ–Ω—ã IP
                params = {
                    'proxy_key': self.proxy_key,
                    'format': 'json'
                }

                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }

                log.info(f"üîÑ Rotation URL: {self.changeip_url}")
                log.info(f"üîÑ Rotation params: {params}")

                for attempt in range(3):
                    try:
                        request_start = time.time()
                        response = requests.get(
                            self.changeip_url, params=params, headers=headers, timeout=30
                        )
                        request_duration = time.time() - request_start
                        log.info(f"üîÑ Rotation request completed in {request_duration:.2f}s")

                        result = response.json()
                        log.info(f"üîç IP rotation response: {result}")

                        if result.get('status') in ['ok', 'OK'] or result.get('code') == 200:
                            log.info("‚è≥ Waiting for rotation to complete...")
                            if self.wait_for_rotation_complete(max_wait=60):
                                log.info(f"‚úÖ IP rotation successful: {self.current_ip}")
                                return True
                            log.error("‚ùå IP rotation timeout in wait_for_rotation_complete")
                            return False

                        if result.get('message') == 'Already change IP, please wait':
                            log.warning("‚ö†Ô∏è Previous rotation still in progress, waiting...")
                            if self.wait_for_rotation_complete(max_wait=60):
                                return True
                            return False

                        log.error(f"‚ùå IP rotation failed: {result}")
                    except requests.Timeout:
                        log.error("‚ùå IP rotation request timeout (30s)")
                    except Exception as e:
                        log.error(f"‚ùå IP rotation request failed: {e}")

                    if attempt < 2:
                        log.info("üîÅ Retrying IP rotation in 5s...")
                        time.sleep(5)

                return False
                    
            finally:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
                self._rotation_in_progress = False
                log.info(f"üîÑ Rotation flag cleared")


    def get_current_ip(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π IP –∞–¥—Ä–µ—Å —Å rate limiting –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞."""
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è "Too many same requests"
        time.sleep(3)

        log.info(f"üîç Getting IP for proxy_id: {self.proxy_id}")
        result = self._make_api_request('proxy_ip')
        log.info(f"üîç API Response: {result}")

        if result:
            if result.get('status') == 'OK' and 'ip' in result:
                ip = str(result.get('ip', '')).strip()
                # –í–∞–ª–∏–¥–∞—Ü–∏—è: –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML (502) –≤–º–µ—Å—Ç–æ IP
                try:
                    import ipaddress
                    if not ip or '<' in ip or '>' in ip or ip.lower().startswith('<html'):
                        raise ValueError("looks like HTML/error page")
                    ipaddress.ip_address(ip)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ IPv4/IPv6
                except Exception:
                    log.warning("‚ö†Ô∏è Invalid IP in response (looks like an error page)")
                    return 'unknown'

                self.current_ip = ip
                log.info(f"‚úÖ Got current IP: {ip}")
                return ip

            elif result.get('status') == 'NULL IP':
                log.warning("‚ö†Ô∏è NULL IP status, rotation in progress")
                return 'rotation_in_progress'

        log.error(f"‚ùå Failed to get IP. Full response: {result}")
        return 'unknown'


    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Å–∏"""
        log.info(f"üîç Getting stats for proxy_id: {self.proxy_id}")
        result = self._make_api_request('get_my_proxy')
        
        log.info(f"üîç Stats API Response type: {type(result)}, length: {len(result) if isinstance(result, (list, dict)) else 'N/A'}")
        
        if result:
            if isinstance(result, list) and len(result) > 0:
                log.info(f"‚úÖ Got proxy stats")
                return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –ø—Ä–æ–∫—Å–∏
            elif isinstance(result, dict) and result.get('status') in ['ok', 'OK']:
                log.info(f"‚úÖ Got proxy stats (dict format)")
                return result
        
        log.error(f"‚ùå Failed to get stats. Response: {result}")
        return {}

    def get_proxy_connection_info(self, stats: dict = None) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        current_time = time.time()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
        if (
            self.connection_info_cache
            and current_time - self.cache_timestamp < self.cache_ttl
        ):
            log.debug("‚úÖ Using cached connection info")
            return self.connection_info_cache

        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if hasattr(self, "_last_connection_request"):
            if current_time - self._last_connection_request < 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                log.debug("‚è≥ Rate limiting connection info requests")
                if self.connection_info_cache:
                    return self.connection_info_cache

        self._last_connection_request = current_time

        log.info("üîç Getting proxy connection info")

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ—ë
        if stats is None:
            stats = self.get_stats()

        if stats:
            connection_info = {
                "host": stats.get("proxy_hostname", "or.mobileproxy.space"),
                "port": stats.get("proxy_http_port", 1049),
                "username": stats.get("proxy_login", "Ygev2e"),
                "password": stats.get("proxy_pass", "enAHepnYgAf7"),
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.connection_info_cache = connection_info
            self.cache_timestamp = current_time
            log.info(
                f"‚úÖ Got and cached connection info: {connection_info['host']}:{connection_info['port']}"
            )
            return connection_info

        log.error("‚ùå Failed to get proxy connection info")
        return None