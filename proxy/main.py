# -*- coding: utf-8 -*-
"""
Main entry point for the proxy server
"""
import threading
import logging

from utils.logger import log
from utils.logging import ShortURLFilter
from core.rate_limiters import OpenAIRateLimiter, ElevenLabsRateLimiter
from core.stats import stats, _stats_loop, _rate_limit_monitor
from proxy.mobile_proxy import MobileProxyManager
from proxy.proxy_manager import ElevenLabsProxyManager
from services.elevenlabs_manager import ElevenLabsManager, ElevenLabsQueue
from web.routes import create_app
from web.excel_management import register_excel_routes


# ====================================================================
# GLOBAL SETUP
# ====================================================================

# Rate limiters
openai_limiter = OpenAIRateLimiter()
elevenlabs_rate_limiter = ElevenLabsRateLimiter()


# Managers
proxy_manager = ElevenLabsProxyManager()
elevenlabs_manager = ElevenLabsManager()
elevenlabs_queue = ElevenLabsQueue(excel_path=elevenlabs_manager.excel_path)

def start_background_threads():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏"""
    # Statistics thread
    threading.Thread(target=_stats_loop, daemon=True).start()

    # Rate limit monitor thread
    threading.Thread(target=_rate_limit_monitor, daemon=True).start()

def setup_mobile_proxy():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ (–æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"""
    MOBILE_PROXY_ID = "407714"
    MOBILE_API_KEY = "f2d5358b7c6d4159663d9899605f245e"

    if not (MOBILE_PROXY_ID and MOBILE_API_KEY):
        log.warning("‚ö†Ô∏è MOBILE_PROXY_ID/MOBILE_API_KEY not configured")
        return

    # 1) –°–æ–∑–¥–∞—ë–º –û–î–ò–ù MobileProxyManager —á–µ—Ä–µ–∑ ProxyManager
    pm_success = proxy_manager.set_mobile_proxy(MOBILE_PROXY_ID, MOBILE_API_KEY)
    if not pm_success:
        log.error("‚ùå ProxyManager mobile proxy config failed")
        return

    # 2) –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –≤ ElevenLabsManager (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö API-–∑–∞–ø—Ä–æ—Å–æ–≤)
    elevenlabs_manager.mobile_proxy = proxy_manager.mobile_proxy
    # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ—Ç –∂–µ –ø—Ä–æ–∫—Å–∏ –æ—á–µ—Ä–µ–¥–∏ ElevenLabs
    elevenlabs_queue.mobile_proxy = proxy_manager.mobile_proxy
    current_ip = proxy_manager.mobile_proxy.current_ip or "configured"

    print(f"‚úÖ Mobile proxy configured automatically: {current_ip}")
    log.info(f"‚úÖ Mobile proxy configured automatically: {current_ip}")
    log.info("üîÅ Reused single MobileProxyManager for all managers")

def setup_logging_filters():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    werkzeug_logger = logging.getLogger('werkzeug')
    werkzeug_logger.addFilter(ShortURLFilter())
    werkzeug_logger.setLevel(logging.WARNING)
    # –î–û–ë–ê–í–õ–Ø–ï–ú DEBUG –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ElevenLabs
    elevenlabs_logger = logging.getLogger("proxy")
    elevenlabs_logger.setLevel(logging.DEBUG)  # –í–∫–ª—é—á–∞–µ–º DEBUG –ª–æ–≥–∏

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ Enhanced Proxy Server starting on 0.0.0.0:8001")
    log.info("üöÄ Enhanced Proxy Server starting on 0.0.0.0:8001")
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    start_background_threads()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
    setup_mobile_proxy()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging_filters()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = create_app()
    register_excel_routes(app)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    import globals as g
    g.init_globals(
        openai_limiter=openai_limiter,
        elevenlabs_rate_limiter=elevenlabs_rate_limiter,
        proxy_manager=proxy_manager,
        elevenlabs_manager=elevenlabs_manager,
        elevenlabs_queue=elevenlabs_queue,
        stats=stats,
        app=app,
    )
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.run(host="0.0.0.0", port=8001, threaded=True)
__all__ = ['openai_limiter', 'elevenlabs_rate_limiter',
           'proxy_manager', 'elevenlabs_manager', 'elevenlabs_queue']

if __name__ == "__main__":
    main()
